fate = function(d = 4){
	x = sum(sample(c(-1,0,1), d, replace = T))
	return(x)
}

d10 = function(){
	x = sample(seq(1,10),1)
	return(x)
}

sd = function(s = 0, b = 1, bd = 1){
	k = 0
	x = sample(seq(0,9),1)
	if(x == 1){
		m = 1
	} else if(x == 0 && b == 1){
		botch = sample(seq(0,9), size = bd, replace = T)
		bcount = sum(botch == 0)
		if(bcount == 0){
			x = s
			k = 1
		} else{
			x = -bcount
			k = 1
		}
	} else {
		x = x + s
		k = 1
	}
	while(k == 0){
		x = sample(seq(1,10),1)
		if(x == 1){
			m = m + 1
			} else {
				x = x * 2^m + s
				k = 1
			}
		}
	return(x)
}

mundane = function(lc, sta){
	dead = 0
	age = 35
	dec.xp = 0
	dec.score = 0
	sta.ap = 0
	while(dead == 0){
		crisis = 0
		age.frac = ceiling(age/10)
		age.total = sd(b=0) + age.frac - lc
		if(age.total %in% 10:12 || age.total == 14 || age.total %in% 16:17){
			dec.xp = dec.xp + 1
		} else if(age.total == 15){
			dec.xp = dec.xp + 1
			sta.ap = sta.ap + 1
		} else if(age.total %in% 19:21){
			dec.xp = dec.xp + 2
		} else if(age.total == 18){
			dec.xp = dec.xp + 2
			sta.ap = sta.ap + 1
		} else if(age.total == 13 || age.total > 21){
			dec.score = dec.score + 1
			dec.xp = 0
			crisis = 1
		}
		if(sta.ap >= abs(sta)){
			sta = sta - 1
			sta.ap = 0
		}
		if(dec.xp >= (dec.score + 1)*5){
			dec.score = dec.score + 1
			dec.xp = 0
		}
		if(dec.score > 4){dead = 1}
		if(crisis == 1){
			crisis.total = d10() + age.frac + dec.score
			if(crisis.total %in% 15:18){
				sta.roll = d10() + sta
				if(sta.roll >= (crisis.total - 14)*3){
					crisis = 0
				} else {
					dead = 1
				}
			} else if(crisis.total > 18){
				dead = 1
			} else{
				crisis = 0
			}
		}
		age = age + 1
	}
	return(age)
}

wizard = function(lc = 2, sta = 0, int = 2, criamon = 0, wealth = 0, spec = 0, risk = 0, aura = 3, age = 25){
	# Initialising variables
	dead = 0
	ypg = 0 # Years past Guantlet
	age = age
	age.app = age
	spec = spec
	app = 0
	dec.xp = 0
	dec.score = 0
	warping.xp = 0
	warping.score = 0
	long.ritual = 0
	sta.ap = 0
	twilight.time = 0
	twilight.count = 0
	skill = cumsum(seq(1:15)) * 5
	art = cumsum(seq(1:35))
	while(dead == 0){
		if(age >= 35){
			crisis = 0
			app = 0
			age.frac = ceiling(age/10)
			# Check for and if necessary perform a longevity ritual
			if(long.ritual == 0 || isTRUE(all.equal(age/10, as.integer(age/10))) || ritual.crisis == 1){
				if(spec == 1){
					cc.xp = 2 * ypg + 55
				} else{
					cc.xp = ypg + 15
				}
				crco = 2 * max(which(art <= cc.xp))
				mt.xp = ypg * 2 + 30
				mt = max(which(skill <= mt.xp))
				lab.total = crco + mt + int + aura
				if(wealth == -1){
					long.ritual = ceiling(lab.total/5)
				} else if(wealth == 0){
					long.ritual = max(ceiling(lab.total/5), 8)
				} else if(wealth == 1){
					long.ritual = max(ceiling(lab.total/5), 12)
				} else{
					long.ritual = max(ceiling(lab.total/5), 16)
				}
				ritual.crisis = 0
				warping.xp = warping.xp + 1
			}
			# Aging roll
			age.total = sd(b=0) + age.frac - lc - long.ritual
			if(age.total %in% 10:12 || age.total == 14 || age.total %in% 16:17){
				dec.xp = dec.xp + 1
			} else if(age.total == 15){
				dec.xp = dec.xp + 1
				sta.ap = sta.ap + 1
			} else if(age.total %in% 19:21){
				dec.xp = dec.xp + 2
			} else if(age.total == 18){
				dec.xp = dec.xp + 2
				sta.ap = sta.ap + 1
			} else if(age.total == 13 || age.total > 21){
				dec.score = dec.score + 1
				dec.xp = 0
				crisis = 1
			} else if(age.total < 3){
				app = 1
			}
			if(sta.ap >= abs(sta)){
				sta = sta - 1
				sta.ap = 0
			}
			if(dec.xp >= (dec.score + 1)*5){
				dec.score = dec.score + 1
				dec.xp = 0
			}
			if(dec.score > 4){dead = 4}
			# Resolve crises
			if(crisis == 1){
				ritual.crisis = 1
				crisis.total = d10() + age.frac + dec.score
				if(crisis.total %in% 15:18){
					sta.roll = d10() + sta
					if(sta.roll >= (crisis.total - 14)*3 || crco + aura + sta + 13.5 >= 5 + 5 * (crisis.total - 14)){
						crisis = 0
					} else {
						dead = 1
					}
				} else if(crisis.total > 18){
					if(crco + aura + sta + 15 > 30){
						crisis = 0
					} else {
						dead = 1
					}
				} else{
					crisis = 0
				}
			}
		}
		if(dead != 0){
			break
		}
		#magical botches and warping
		botch.check = 0 
		botch.chances = 4
		while(botch.check < botch.chances){
			bd = aura 
			botch.roll = sum(sample(c(0,1), bd, prob = c(0.9, 0.1), replace = TRUE))
			if(botch.roll > 0){
				warping.xp = warping.xp + botch.roll
				if(botch.roll > 1){
					if(warping.xp > 4){
						warping.score = max(which(skill <= warping.xp))
					} else {
						warping.score = 0
					}
					# Resolve Twilight
					# Check concentration, vim, enigmatic wisdom
					conc.xp = ypg + 5
					conc = max(which(skill <= conc.xp))
					vim.xp = ypg + 15
					vim = max(which(art <= vim.xp))
					vim.bonus = ceiling(vim/5)
					if(criamon == 1){
						EW.xp = 2 * ypg + 30
						EW = max(which(skill <= EW.xp))
					} else {
						EW = 0
					}
					# Actual twilight resolution
					ta.roll = sd(bd = aura)
					twi.roll = sd(s = warping.score + botch.roll + EW + aura, b = 0)
					if(ta.roll < 0){
						twi.fail = 2
					} else if(ta.roll + sta + conc + vim.bonus < twi.roll){
						twi.fail = 1
					} else {
						twi.fail = 0
					}
					if(twi.fail > 0){
						twilight.count = twilight.count + 1
						if(twi.fail == 1){
							comp.roll = sd(bd = 1 + botch.roll)
							comp.vs = max(sd(s = warping.score, bd = 1 + botch.roll), 0)
							if(comp.roll < 0){
								twi.mod = abs(comp.roll)
							} else if(comp.roll + int + EW < comp.vs){
								twi.mod = 0
							} else {
								twi.mod = comp.vs - comp.roll - int
							}
							twi.time = warping.score + twi.mod
						} else if(twi.fail == 2){
							twi.time = warping.score + abs(ta.roll)
						}
						if(twi.time == 5){
							twilight.time = twilight.time + 1
						} else if(twi.time == 6){
							twilight.time = twilight.time + 3
						} else if(twi.time == 7){
							twilight.time = twilight.time + 12
						} else if(twi.time == 8){
							twilight.time = twilight.time + 84
						} else if(twi.time == 9){
							twilight.time = twilight.time + 84 + 12 * sd(b = 0)
						} else if (twi.time > 9){
							dead = 2
						}
					}
				}
			}
			botch.check = botch.check + 1
		}
		if(dead != 0){
			break
		}
		# Check for violent death
		if(risk == 1){
			death.violence = sample(c(0,1), size = 1, prob = c(0.9975, 0.0025))
		} else if(risk == 0){
			death.violence = sample(c(0,1), size = 1, prob = c(0.9995, 0.0005))
		} else {
			death.violence = sample(c(0,1), size = 1, prob = c(0.99975, 0.00025))
		}
		if(death.violence == 1){
			dead = 3
		}
		if(dead != 0){
			break
		}
		# Increment age
		age = age + 1
		ypg = ypg + 1
		if(app == 0){age.app = age.app + 1}
	}
	return(c(age, age.app, long.ritual, warping.score, twilight.time, dead, twilight.count))
}

simulate = function(n = 500){
	age = rep(0,n)
	age.app = rep(0,n)
	wealth = rep(0,n)
	ritual = rep(0,n)
	stamina = rep(0,n)
	death.cause = rep(0,n)
	risk = rep(0,n)
	intelligence = rep(0,n)
	warping = rep(0,n)
	aura = rep(0,n)
	twilight.time = rep(0,n)
	twilight.count = rep(0,n)
	for(i in 1:n){
		gauntlet = 25 + fate(d = 5)
		wlth = sample(c(-1,0,1,2),1, prob = c(0.1,0.4,0.4,0.1))
		risky = fate(d = 1)
		sta = fate(d = 3)
		int = 3 + fate(d = 2)
		aura.strength = sample(c(2,3,4,5,6), 1, prob = c(0.1,0.5,0.25,0.1,0.05))
		spec = sample(c(0,1), 1, prob = c(0.9, 0.1))
		x = wizard(wealth = wlth, sta = sta, int = int, risk = risky, aura = aura.strength, age = gauntlet, spec = spec)
		age[i] = x[1]
		wealth[i] = wlth
		ritual[i] = x[3]
		stamina[i] = sta
		intelligence[i] = int
		age.app[i] = x[2]
		death.cause[i] = x[6]
		aura[i] = aura.strength
		warping[i] = x[4]
		twilight.time[i] = x[5]
		twilight.count[i] = x[7]
		risk[i] = risky
	}
	return(data.frame(age, age.app, wealth, risk, ritual, intelligence, stamina, warping, aura, twilight.time, twilight.count, death.cause))
}

